package com.rarible.protocol.order.listener.service.zero.ex

import com.rarible.ethereum.common.keccak256
import com.rarible.protocol.order.core.model.SimpleTraceResult
import com.rarible.protocol.order.core.model.ZeroExFeeData
import com.rarible.protocol.order.core.model.ZeroExMatchOrdersData
import com.rarible.protocol.order.core.model.ZeroExOrder
import com.rarible.protocol.order.core.trace.TraceCallService
import com.rarible.protocol.order.core.trace.TransactionTraceProvider
import io.daonomic.rpc.domain.Binary
import io.daonomic.rpc.domain.Word
import kotlinx.coroutines.runBlocking
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import scalether.domain.Address

class ZeroExOrderParserTest {

    @Test
    fun `parse input for buying by sell order`() = runBlocking<Unit> {
        val zeroExParser = ZeroExOrderParser(TraceCallService(TestTransactionTraceProvider()))
        // https://polygonscan.com/tx/0x08ef7447c15669631b1b54bf6b035df31c0b3b19720a760b2093db8b1eeb14cb
        val result = zeroExParser.parse(
            Binary.apply(
                "0xbbbfa60c" +
                    // 192
                    "00000000000000000000000000000000000000000000000000000000000000c0" +
                    // 992
                    "00000000000000000000000000000000000000000000000000000000000003e0" +
                    // 1824
                    "0000000000000000000000000000000000000000000000000000000000000720" +
                    // 1952
                    "00000000000000000000000000000000000000000000000000000000000007a0" +
                    // 2080
                    "0000000000000000000000000000000000000000000000000000000000000820" +

                    "0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619" +

                    // makerAddress
                    "0000000000000000000000004d3b39791d9bfe56304b32c35fe8f3d411d85a02" +
                    // takerAddress
                    "0000000000000000000000000000000000000000000000000000000000000000" +
                    // feeRecipientAddress
                    "000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d" +
                    // senderAddress
                    "000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d" +
                    // makerAssetAmount 1520000000000000
                    "0000000000000000000000000000000000000000000000000005666e940f0000" +
                    // takerAssetAmount 1
                    "0000000000000000000000000000000000000000000000000000000000000001" +
                    // makerFee 0
                    "0000000000000000000000000000000000000000000000000000000000000000" +
                    // takerFee 0
                    "0000000000000000000000000000000000000000000000000000000000000000" +
                    // expirationTimeSeconds 1650013671
                    "00000000000000000000000000000000000000000000000000000000625935e7" +
                    // salt 97119520864459265
                    "000000000000000000000000000000000000000000000000015909b08de1da01" +

                    // 448
                    "00000000000000000000000000000000000000000000000000000000000001c0" +
                    // 544
                    "0000000000000000000000000000000000000000000000000000000000000220" +
                    // 672
                    "00000000000000000000000000000000000000000000000000000000000002a0" +
                    // 736
                    "00000000000000000000000000000000000000000000000000000000000002e0" +

                    // 36 - размер данных makerAssetData
                    "0000000000000000000000000000000000000000000000000000000000000024" +
                    // makerAssetData
                    "f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000" +
                    // 68 - размер данных takerAssetData
                    "0000000000000000000000000000000000000000000000000000000000000044" +
                    // takerAssetData
                    "025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b" +

                    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +

                    "dfa346c49c159c58d8316978b0f721ecebd10a3c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000005666e940f00000000000000000000000000000000000000000000000000000000accdd281e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000625935e700000000000000000000000000000000000000000000000000fef66f825d18ca00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000044025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c7763a38bdc4a8cc3bfdab4302a54c5c76f0aafb5ff54fafb4a809d34d84277dd3a940201f11fd8bf824c2732af189ef6f922ef351157ea0d3a3c13e6c4543db30300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c40e0c8008601b2df04d165574e899598e63caa7f7a68f2c2ba274bd088c56e8162513d0f1a69a31770981117d8533133295cef7fa4ec5978376caa8e7ff8c0d10300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c010730000000000000000000000000000000000000000000000000000228f908060000000000000000000000000000bbdd174198c3bafff09f58d62119e680141ab4400000000000000000000000000000000000000000000000000008a3e42018000"
            )
        )

        val expLeftOrder = ZeroExOrder(
            // продавец в ордере (он продавец валюты за nft), покупатель в сделке - покупатель nft
            makerAddress = Address.apply("0x4d3b39791d9bfe56304b32c35fe8f3d411d85a02"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            makerAssetAmount = 1520000000000000.toBigInteger(),
            takerAssetAmount = 1.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1650013671.toBigInteger(),
            salt = 97119520864459265.toBigInteger(),
            makerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            takerAssetData = Binary.apply("0x025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder = ZeroExOrder(
            // продавец в ордере (он продавец nft за валюту), продавец в сделке - продавец nft
            makerAddress = Address.apply("0xdfa346c49c159c58d8316978b0f721ecebd10a3c"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            // получатель комиссии - это zero ex fee wrapper
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // отправитель - это zero ex fee wrapper
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // кол-во продаваемого asset
            makerAssetAmount = 1.toBigInteger(),
            // кол-во покупаемого asset
            takerAssetAmount = 1520000000000000.toBigInteger(),
            // комиссия продавца
            makerFee = 190000000000000.toBigInteger(),
            // комиссия покупателя
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1650013671.toBigInteger(),
            salt = 71765602873448650.toBigInteger(),
            // asset продаваемый
            makerAssetData = Binary.apply("0x025717920000000000000000000000002b4a66557a79263275826ad31a4cddc2789334bd000000000000000000000000000000000000000000000000000000000000762b"),
            // asset покупаемый - WETH
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // валюта комиссии продавца - WETH
            makerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // валюта комиссии покупателя
            takerFeeAssetData = Binary.apply("0x")
        )
        val expLeftSignature =
            Binary.apply("0x1c7763a38bdc4a8cc3bfdab4302a54c5c76f0aafb5ff54fafb4a809d34d84277dd3a940201f11fd8bf824c2732af189ef6f922ef351157ea0d3a3c13e6c4543db303")
        val expRightSignature =
            Binary.apply("0x1c40e0c8008601b2df04d165574e899598e63caa7f7a68f2c2ba274bd088c56e8162513d0f1a69a31770981117d8533133295cef7fa4ec5978376caa8e7ff8c0d103")
        // кому перечислит fee feeRecipientAddress и в каком размере
        // (zero ex fee wrapper передаст полученные 190000000000000 WETH этим адресам)
        val expFeeData = listOf(
            ZeroExFeeData(
                recipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                paymentTokenAmount = 38000000000000.toBigInteger()
            ),
            ZeroExFeeData(
                recipient = Address.apply("0x0bbdd174198c3bafff09f58d62119e680141ab44"),
                paymentTokenAmount = 152000000000000.toBigInteger()
            )
        )
        val expPaymentTokenAddress = Address.apply("0x7ceb23fd6bc0add59e62ac25578270cff1b9f619")
        assertThat(result)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::leftOrder.name, expLeftOrder)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::rightOrder.name, expRightOrder)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::leftSignature.name, expLeftSignature)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::rightSignature.name, expRightSignature)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::feeData.name, expFeeData)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::paymentTokenAddress.name, expPaymentTokenAddress)
    }


    @Test
    fun `parse input for selling by bid order`() = runBlocking<Unit> {
        val zeroExParser = ZeroExOrderParser(TraceCallService(TestTransactionTraceProvider()))
        // https://polygonscan.com/tx/0x41cdc1f41c866cd70b30efa5255044b29326856151709ad3cba99fa8229ee586
        val result = zeroExParser.parse(
            Binary.apply(
                "0xbbbfa60c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000009a00000000000000000000000000000000000000000000000000000000000000a200000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000bf228c81e042502adb2c3a8e281b826c61eea5ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d00000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000624ba58d00000000000000000000000000000000000000000000000001130b237ee4603800000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000ef73921d8304e702fabc58e31f1fe07ea5e3680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000f715beb51ec8f63317d66f491e37e7bb048fcc2d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000624ba58d000000000000000000000000000000000000000000000000000f22f3662102db00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000144a7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000e00000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421b99ade9f291e32983f7aca293534f3c72e6ac1c5e671fe757d76cc7eeb22d4d992b93655dd481b4a093a98eab63b6de7f840c8d331f017982fabb515a77e4c5110300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c63dabbb9d0fe15914fb890275d551207f0300511bac12394871c898fd6edacf44def7516e1be41effd046efe832ed972ea95eb7f589893430035534aa059e4350300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c0107300000000000000000000000000000000000000000000000000002d79883d2000000000000000000000000000965f73921d8304e702fabc58e31f1fe07ea5e36800000000000000000000000000000000000000000000000000002d79883d2000"
            )
        )

        val expLeftOrder = ZeroExOrder(
            // продавец в ордере (он продавец валюты за nft), покупатель в сделке - покупатель nft
            makerAddress = Address.apply("0xbf228c81e042502adb2c3a8e281b826c61eea5ec"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            makerAssetAmount = 2000000000000000.toBigInteger(),
            takerAssetAmount = 1.toBigInteger(),
            makerFee = 0.toBigInteger(),
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1649124749.toBigInteger(),
            salt = 77417865676087352.toBigInteger(),
            makerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            takerAssetData = Binary.apply("0xa7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000e00000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            makerFeeAssetData = Binary.apply("0x"),
            takerFeeAssetData = Binary.apply("0x")
        )
        val expRightOrder = ZeroExOrder(
            // продавец в ордере (он продавец nft за валюту), продавец в сделке - продавец nft
            makerAddress = Address.apply("0x965f73921d8304e702fabc58e31f1fe07ea5e368"),
            takerAddress = Address.apply("0x0000000000000000000000000000000000000000"),
            // получатель комиссии - это zero ex fee wrapper
            feeRecipientAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // отправитель - это zero ex fee wrapper
            senderAddress = Address.apply("0xf715beb51ec8f63317d66f491e37e7bb048fcc2d"),
            // кол-во продаваемого asset
            makerAssetAmount = 1.toBigInteger(),
            // кол-во покупаемого asset
            takerAssetAmount = 2000000000000000.toBigInteger(),
            // комиссия продавца
            makerFee = 100000000000000.toBigInteger(),
            // комиссия покупателя
            takerFee = 0.toBigInteger(),
            expirationTimeSeconds = 1649124749.toBigInteger(),
            salt = 4260553436496603.toBigInteger(),
            // asset продаваемый
            makerAssetData = Binary.apply("0xa7cb5fb70000000000000000000000002953399124f0cbb46d2cbacd8a89cf0599974963000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001965f73921d8304e702fabc58e31f1fe07ea5e3680000000000000e00000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            // asset покупаемый - WETH
            takerAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // валюта комиссии продавца - WETH
            makerFeeAssetData = Binary.apply("0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619"),
            // валюта комиссии покупателя
            takerFeeAssetData = Binary.apply("0x")
        )
        val expLeftSignature =
            Binary.apply("0x1b99ade9f291e32983f7aca293534f3c72e6ac1c5e671fe757d76cc7eeb22d4d992b93655dd481b4a093a98eab63b6de7f840c8d331f017982fabb515a77e4c51103")
        val expRightSignature =
            Binary.apply("0x1c63dabbb9d0fe15914fb890275d551207f0300511bac12394871c898fd6edacf44def7516e1be41effd046efe832ed972ea95eb7f589893430035534aa059e43503")
        // кому перечислит fee feeRecipientAddress и в каком размере
        // (zero ex fee wrapper передаст полученные 190000000000000 WETH этим адресам)
        val expFeeData = listOf(
            ZeroExFeeData(
                recipient = Address.apply("0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"),
                paymentTokenAmount = 50000000000000.toBigInteger()
            ),
            ZeroExFeeData(
                recipient = Address.apply("0x965f73921d8304e702fabc58e31f1fe07ea5e368"),
                paymentTokenAmount = 50000000000000.toBigInteger()
            )
        )
        val expPaymentTokenAddress = Address.apply("0x7ceb23fd6bc0add59e62ac25578270cff1b9f619")
        assertThat(result)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::leftOrder.name, expLeftOrder)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::rightOrder.name, expRightOrder)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::leftSignature.name, expLeftSignature)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::rightSignature.name, expRightSignature)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::feeData.name, expFeeData)
            .hasFieldOrPropertyWithValue(ZeroExMatchOrdersData::paymentTokenAddress.name, expPaymentTokenAddress)
    }

    private class TestTransactionTraceProvider : TransactionTraceProvider {
        override suspend fun traceAndFindFirstCallTo(
            transactionHash: Word,
            to: Address,
            id: Binary
        ): SimpleTraceResult? = null

        override suspend fun traceAndFindAllCallsTo(
            transactionHash: Word,
            to: Address,
            id: Binary
        ): List<SimpleTraceResult> = emptyList()
    }
}